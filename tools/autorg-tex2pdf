#!/usr/bin/env zsh

# it's always useful to wrap them, in case we change behaviour later
notice() { print "[*] $1" >&2 }
error()  { print "[!] $1" >&2 }
func()   { if [[ $DEBUG == 1 ]]; then print "[D] $1" >&2; fi }
act()    {
    if [ "$1" = "-n" ]; then
	print -n " .  $2" >&2;
    else
	print " .  $1" >&2;
    fi
}


{ test "$1" = "" } && {
  error "usage: $0 filename.tex"
  return 1 }

file $1 | grep -i latex > /dev/null
{ test "$?" = "0" } || {
    error "not a latex file: $1"
    return 1 }

notice "Rendering Tex file into PDF: $1"

file="${1%%.tex}"

# { test -r "${file}.pdf" } && {
#     error "file already exists: ${file}.pdf"
#     return 1 }

touch ${file}.log

act "First pass with LaTex"
latex -interaction nonstopmode $1 >> ${file}.log

if [ -r ${file}.idx ]; then
    act "Generating the Index"
    makeindex ${file}.idx >> ${file}.log

    act "Including the Index"
    cat $1 | awk '
/\\printindex/ {  system("cat '"$file.ind"'"); next }
{ print $0 }' > ${file}.full.tex

else # nothing to add to the latex

    cp ${file}.tex ${file}.full.tex

fi

act "Second pass with LaTex"
latex -interaction nonstopmode ${file}.full.tex >> ${file}.full.log

act "Rendering the PDF"
texi2dvi --pdf --batch ${file}.full.tex >> ${file}.full.log

act "Optimizing the PDF"
qpdf --linearize ${file}.full.pdf ${file}.pdf

act "cleaning up leftovers"

for i in aux dvi out ilg idx idxs ind toc; do
    rm -f ${file}.${i}
    rm -f ${file}.full.${i}
done

notice "Rendering done:"
act "`ls -lh ${file}.pdf`"